import {Media, MEDIA_STATUS, MediaObject} from '@ionic-native/media';
import {MediaService, MediaStatus} from "./media.service";

export class MediaCordovaService extends MediaService {

    private media: Media = new Media();
    private mediaObject: MediaObject =  null;
    private requestPause = false;
    private mediaStatus: MediaStatus = MediaStatus.NONE;

    constructor() {
        super();
    }

    load(file : string) {

        try {
            this.mediaObject = this.media.create(file);
            this.mediaObject.onSuccess.subscribe(() => console.log('Action is successful'));
            this.mediaObject.onError.subscribe((error) =>console.log(error));
            this.mediaObject.onStatusUpdate.subscribe((status) => this.onUpdateStatus(status)); // fires when file status changes
        }
        catch(e) {
            alert(e);
            if (this.mediaObject != null)
                this.mediaObject.release();
            this.mediaObject = null;
        }
    }

// https://developers.google.com/web/updates/2017/06/play-request-was-interrupted
    play(){
        super.play();
        if (this.mediaObject != null) {
            this.mediaObject.play();
            this.setVolume();
        }
    }
    pause(){
        if (this.mediaObject != null) {
             // if (this.mediaStatus == MediaStatus.NONE || this.mediaStatus == MediaStatus.STARTING || this.mediaStatus == MediaStatus.RUNNING) {
                this.requestPause = true;
             // }

            if (this.mediaStatus == MediaStatus.RUNNING) {
                this.mediaObject.pause();
                this.requestPause = false;
            }
        }
    }
    stop(){
        super.stop();
        if (this.mediaObject != null) {
            this.mediaObject.stop();
        }
    }

    protected setVolume() {
        console.log("vol : ",this.currentVolume);
        if (this.mediaObject != null /* && this.fileLoaded*/) {
            this.mediaObject.setVolume(this.currentVolume / this.maxVolume);
        }
    }

    private onUpdateStatus(status: MEDIA_STATUS) {
        // let mediaStatus: MediaStatus;
        // switch(status) {
        //     case MEDIA_STATUS.NONE:     { mediaStatus = MediaStatus.NONE;  break; }
        //     case MEDIA_STATUS.STARTING: { mediaStatus = MediaStatus.STARTING;  break; }
        //     case MEDIA_STATUS.RUNNING:  { mediaStatus = MediaStatus.RUNNING;  break; }
        //     case MEDIA_STATUS.PAUSED:   { mediaStatus = MediaStatus.PAUSED;  break; }
        //     case MEDIA_STATUS.STOPPED:  { mediaStatus = MediaStatus.STOPPED;  break; }
        // //     // default: {
        // //     //     alert("Unknown status :" + status.toString());
        // //     //     break;
        // //     // }
        // }

        switch(status) {
            case MEDIA_STATUS.NONE:     { this.mediaStatus = MediaStatus.NONE;  break; }
            case MEDIA_STATUS.STARTING: { this.mediaStatus = MediaStatus.STARTING;  break; }
            case MEDIA_STATUS.RUNNING:  { this.mediaStatus = MediaStatus.RUNNING;  break; }
            case MEDIA_STATUS.PAUSED:   { this.mediaStatus = MediaStatus.PAUSED;  break; }
            case MEDIA_STATUS.STOPPED:  {
                if (this.userStop) {
                    this.mediaStatus = MediaStatus.STOPPED;
                }else{
                    if (this.requestPause)
                        this.mediaStatus = MediaStatus.FINISHANDPAUSED;
                    else
                        this.mediaStatus = MediaStatus.FINISHED;
                }
                break;
            }
        }

        if (this.mediaStatus == MediaStatus.RUNNING) {
            if (this.requestPause) {
                this.pause();
            }
        }

        if (this.mediaStatus == MediaStatus.PAUSED
            || this.mediaStatus == MediaStatus.STOPPED
            || this.mediaStatus == MediaStatus.FINISHED
            || this.mediaStatus == MediaStatus.FINISHANDPAUSED
        ) {
            this.requestPause = false;
        }

        if (this.mediaStatus == MediaStatus.STOPPED
            || this.mediaStatus == MediaStatus.FINISHED
            || this.mediaStatus == MediaStatus.FINISHANDPAUSED
        ) {
            this.mediaObject.release();
            // this.mediaObject = null;
        }

        this.status.next(this.mediaStatus);
    }
}